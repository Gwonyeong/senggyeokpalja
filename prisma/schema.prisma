// Prisma Schema for 성격팔자 (Seonggyeok-Palja) - Next.js + Supabase

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Profile (extends Supabase Auth)
model Profile {
  id            String   @id @db.Uuid
  email         String   @unique
  displayName   String?  @map("display_name")
  photoUrl      String?  @map("photo_url")
  provider      String?
  emailVerified Boolean  @default(false) @map("email_verified")
  firebaseUid   String?  @unique @map("firebase_uid") // 원본 Firebase UID 보관
  lastSignInAt  DateTime? @map("last_sign_in_at")

  // 개인정보 필드 추가
  name          String?  // 사용자 이름
  birthDate     DateTime? @map("birth_date") @db.Date // 생년월일
  birthTime     DateTime? @map("birth_time") @db.Time // 태어난 시간
  gender        String?  @db.VarChar(10) // 성별 (male, female)
  mbti          String?  @db.VarChar(4) // MBTI 성격유형
  calendar      String?  @default("solar") @db.VarChar(10) // 양력/음력 (solar, lunar)
  isLeapMonth   Boolean? @default(false) @map("is_leap_month") // 윤달 여부
  personalityType String? @map("personality_type") @db.VarChar(4) // 팔자유형 (NGHJ 등)
  phone         String?  @db.VarChar(20) // 전화번호

  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  analysisResults    AnalysisResult[]
  synergyAnalysis    SynergyAnalysis[]
  savedResults       SavedResult[]
  consultationResults ConsultationResult[]
  paymentResults     PaymentResult[]

  @@map("profiles")
}

// Personality Types (MBTI x 팔자유형)
model PersonalityType {
  code        String @id @db.VarChar(4)
  alias       String
  imageUrl    String? @map("image_url")
  description String
  advice      String
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  synergyAsPartner    SynergyAnalysis[] @relation("PartnerType")
  synergyAsUser       SynergyAnalysis[] @relation("UserType")

  @@map("personality_types")
}

// Analysis Results
model AnalysisResult {
  id              String    @id @default(uuid()) @db.Uuid
  userId          String    @map("user_id") @db.Uuid
  personalityType String    @map("personality_type") @db.VarChar(4)
  mbtiType        String?   @map("mbti_type") @db.VarChar(4)
  paljaType       String?   @map("palja_type") @db.VarChar(20)
  birthDate       DateTime? @map("birth_date") @db.Date
  birthTime       DateTime? @map("birth_time") @db.Time
  lunarCalendar   Boolean   @default(false) @map("lunar_calendar")
  analysisData    Json?     @map("analysis_data")
  createdAt       DateTime  @default(now()) @map("created_at")

  // Relations
  user            Profile         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([personalityType])
  @@map("analysis_results")
}

// Synergy Analysis
model SynergyAnalysis {
  id                String   @id @default(uuid()) @db.Uuid
  userId            String   @map("user_id") @db.Uuid
  partnerType       String   @map("partner_type") @db.VarChar(4)
  userType          String   @map("user_type") @db.VarChar(4)
  compatibilityScore Int?    @map("compatibility_score")
  analysisData      Json?    @map("analysis_data")
  createdAt         DateTime @default(now()) @map("created_at")

  // Relations
  user              Profile         @relation(fields: [userId], references: [id], onDelete: Cascade)
  partnerTypeRef    PersonalityType @relation("PartnerType", fields: [partnerType], references: [code])
  userTypeRef       PersonalityType @relation("UserType", fields: [userType], references: [code])

  @@index([userId])
  @@map("synergy_analysis")
}

// Saved Results
model SavedResult {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @map("user_id") @db.Uuid
  resultType String   @map("result_type") @db.VarChar(20)
  resultId   String?  @map("result_id") @db.Uuid
  title      String?
  isFavorite Boolean  @default(false) @map("is_favorite")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  user       Profile  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("saved_results")
}

// Consultation Results (상담 신청 결과)
model ConsultationResult {
  id                String    @id @default(uuid()) @db.Uuid
  userId            String    @map("user_id") @db.Uuid

  // 생년월일 정보
  birthDate         DateTime  @map("birth_date") @db.Date
  birthTime         DateTime? @map("birth_time") @db.Time
  lunarCalendar     Boolean   @default(false) @map("lunar_calendar")

  // 사주팔자 (Four Pillars of Destiny)
  yearStem          String    @map("year_stem") @db.VarChar(10)      // 년주 천간
  yearBranch        String    @map("year_branch") @db.VarChar(10)    // 년주 지지
  monthStem         String    @map("month_stem") @db.VarChar(10)     // 월주 천간
  monthBranch       String    @map("month_branch") @db.VarChar(10)   // 월주 지지
  dayStem           String    @map("day_stem") @db.VarChar(10)       // 일주 천간
  dayBranch         String    @map("day_branch") @db.VarChar(10)     // 일주 지지
  timeStem          String?   @map("time_stem") @db.VarChar(10)      // 시주 천간
  timeBranch        String?   @map("time_branch") @db.VarChar(10)    // 시주 지지

  // 오행 (Five Elements)
  woodCount         Int       @map("wood_count") @default(0)         // 목(木)
  fireCount         Int       @map("fire_count") @default(0)         // 화(火)
  earthCount        Int       @map("earth_count") @default(0)        // 토(土)
  metalCount        Int       @map("metal_count") @default(0)        // 금(金)
  waterCount        Int       @map("water_count") @default(0)        // 수(水)
  dominantElement   String?   @map("dominant_element") @db.VarChar(10) // 주된 오행

  // 십신 (Ten Gods)
  tenGods           Json?     @map("ten_gods")                       // 지지 기반 십신 분석 데이터
  heavenlyStemGods  Json?     @map("heavenly_stem_gods")            // 천간 기반 십신 분석 데이터

  // 추가 분석 데이터
  personalityType   String?   @map("personality_type") @db.VarChar(4) // MBTI x 팔자 유형
  fortuneData       Json?     @map("fortune_data")                   // 운세 분석 데이터
  compatibilityData Json?     @map("compatibility_data")            // 궁합 데이터
  additionalData    Json?     @map("additional_data")                // 기타 추가 데이터

  // 결제 정보
  isPaid            Boolean   @default(false) @map("is_paid")        // 결제 여부
  paidAt            DateTime? @map("paid_at")                        // 결제 일시
  paymentMethod     String?   @map("payment_method") @db.VarChar(50) // 결제 수단
  paymentAmount     Int?      @map("payment_amount")                 // 결제 금액
  paymentKey        String?   @map("payment_key") @db.VarChar(200)   // 토스페이먼츠 결제 키
  orderId           String?   @map("order_id") @db.VarChar(200)      // 주문 ID

  // 상담 정보
  consultationType  String?   @map("consultation_type") @db.VarChar(50) // 상담 유형
  consultationNote  String?   @map("consultation_note") @db.Text     // 상담 메모

  // 타임스탬프
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  user              Profile   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isPaid])
  @@index([createdAt])
  @@map("consultation_results")
}

// Payment Results (결제 결과)
model PaymentResult {
  id                String    @id @default(uuid()) @db.Uuid
  userId            String?   @map("user_id") @db.Uuid

  // 토스페이먼츠 결제 정보
  paymentKey        String    @unique @map("payment_key") @db.VarChar(200)
  orderId           String    @unique @map("order_id") @db.VarChar(200)
  amount            Int       // 결제 금액
  currency          String    @default("KRW") @db.VarChar(10)
  method            String?   @map("method") @db.VarChar(50) // 결제 수단 (카드, 계좌이체 등)

  // 결제 상태
  status            String    @map("status") @db.VarChar(50) // SUCCESS, FAILED, PENDING, CANCELLED
  failureCode       String?   @map("failure_code") @db.VarChar(100) // 실패 코드
  failureMessage    String?   @map("failure_message") @db.Text // 실패 메시지

  // 결제 상세 정보
  customerName      String?   @map("customer_name") @db.VarChar(100)
  customerEmail     String?   @map("customer_email") @db.VarChar(200)
  customerPhone     String?   @map("customer_phone") @db.VarChar(50)

  // 카드 정보 (카드 결제인 경우)
  cardNumber        String?   @map("card_number") @db.VarChar(50) // 마스킹된 카드 번호
  cardType          String?   @map("card_type") @db.VarChar(50) // 신용, 체크 등
  cardCompany       String?   @map("card_company") @db.VarChar(50) // 카드사
  installmentMonth  Int?      @map("installment_month") // 할부 개월

  // 기타 정보
  productName       String?   @map("product_name") @db.VarChar(200) // 상품명
  metadata          Json?     // 추가 메타데이터
  requestedAt       DateTime? @map("requested_at") // 결제 요청 시각
  approvedAt        DateTime? @map("approved_at") // 결제 승인 시각

  // 타임스탬프
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  user              Profile?  @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([paymentKey])
  @@index([orderId])
  @@map("payment_results")
}

// Admin Settings
model AdminSetting {
  id           String   @id @default(uuid()) @db.Uuid
  settingKey   String   @unique @map("setting_key") @db.VarChar(100)
  settingValue Json?    @map("setting_value")
  updatedBy    String?  @map("updated_by") @db.Uuid
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("admin_settings")
}
